> [1] 로깅
    > 로그를 남기는 작업
    > 로그란? 컴퓨터가 처리한 기록
    > 기록을 보고 유지보수(문제 확인 / 해결 / 분석 / 통계)
    > Spring Log Annotation
        > 1) @Log4j2 : 사용할 클래스 위에 로깅 어노테이션 작성

    > application.properties 설정
        > 1) 로깅할 파일명 경로
            logging.file.name = log 파일경로
            logging.file.name=src/main/resources/logging

        > 2) 로깅 레벨의 루트
            > logging.level.root=debug  (debug, info, warn, error)
            > logging.level.root=info   (info, warn, error)
            > logging.level.root=warn   (warn, error)
            > logging.level.root=error  (error)

        > 3) 로깅 레벨의 특정 루트
            > logging.level.패키지 경로 : logginf.level.example.root.service패키지명 (*전체 클래스)
            > logging.level.특정 클래스 경로 : logginf.level.example.root.LogController (*특정 클래스)

    > 로깅 레벨
        > 1. debug  : 개발 환경에서 주로 사용, 상세 정보
        > 2. info   : 운영 환경에서 사용, 동작 정보
        > 3. warn   : 운영 환경에서 사용, 경고 정보
        > 4. error  : 운영 환경에서 사용, 예외 정보, 심각한 오류
        > 5. fatal  : 운영 환경에서 사용, 치명적인 오류(시스템)

    > 로깅 메소드
        > 1. log.debug("로그 내용");
        > 2. log.info("로그 내용");
        > 3. log.warn("로그 내용");
        > 4. log.error("로그 내용");

    > print 와 로깅의 차이점
        > 1. print 단순한 출력용 메소드이고 일반적으로 운영 환경에서는 사용하지 않는다.
        > 2. log 로깅 라이브러리는 다양한 로그 레벨과 형식을 제공한다.